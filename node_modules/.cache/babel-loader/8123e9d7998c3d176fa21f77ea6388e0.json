{"ast":null,"code":"var Sequence = require('./Sequence');\n\nvar Util = require('util');\n\nvar Packets = require('../packets');\n\nvar Auth = require('../Auth');\n\nmodule.exports = ChangeUser;\nUtil.inherits(ChangeUser, Sequence);\n\nfunction ChangeUser(options, callback) {\n  Sequence.call(this, options, callback);\n  this._user = options.user;\n  this._password = options.password;\n  this._database = options.database;\n  this._charsetNumber = options.charsetNumber;\n  this._currentConfig = options.currentConfig;\n}\n\nChangeUser.prototype.determinePacket = function determinePacket(firstByte) {\n  switch (firstByte) {\n    case 0xfe:\n      return Packets.AuthSwitchRequestPacket;\n\n    case 0xff:\n      return Packets.ErrorPacket;\n\n    default:\n      return undefined;\n  }\n};\n\nChangeUser.prototype.start = function (handshakeInitializationPacket) {\n  var scrambleBuff = handshakeInitializationPacket.scrambleBuff();\n  scrambleBuff = Auth.token(this._password, scrambleBuff);\n  var packet = new Packets.ComChangeUserPacket({\n    user: this._user,\n    scrambleBuff: scrambleBuff,\n    database: this._database,\n    charsetNumber: this._charsetNumber\n  });\n  this._currentConfig.user = this._user;\n  this._currentConfig.password = this._password;\n  this._currentConfig.database = this._database;\n  this._currentConfig.charsetNumber = this._charsetNumber;\n  this.emit('packet', packet);\n};\n\nChangeUser.prototype['AuthSwitchRequestPacket'] = function (packet) {\n  var name = packet.authMethodName;\n  var data = Auth.auth(name, packet.authMethodData, {\n    password: this._password\n  });\n\n  if (data !== undefined) {\n    this.emit('packet', new Packets.AuthSwitchResponsePacket({\n      data: data\n    }));\n  } else {\n    var err = new Error('MySQL is requesting the ' + name + ' authentication method, which is not supported.');\n    err.code = 'UNSUPPORTED_AUTH_METHOD';\n    err.fatal = true;\n    this.end(err);\n  }\n};\n\nChangeUser.prototype['ErrorPacket'] = function (packet) {\n  var err = this._packetToError(packet);\n\n  err.fatal = true;\n  this.end(err);\n};","map":null,"metadata":{},"sourceType":"script"}